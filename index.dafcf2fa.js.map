{"mappings":"8vBAAMA,IAiISA,EAjITA,2KAEAC,MACA,SAAaC,GAIX,IAFA,IAAMC,EAAUC,KAAKC,eAAeH,GAChCI,EAAO,GACHC,EAAE,EAAGA,EAAEJ,EAAQK,OAAQD,IACxBH,KAAKK,MAAMN,EAAQI,MAClBD,GAAQ,KAGhB,OAAOA,iBAITL,MAAA,SAAMS,GAEJ,IAAK,IAAIH,EAAE,EAAGA,EAAEG,EAAKH,IACnB,GAAIG,EAAMH,GAAM,EACd,OAAO,EAGX,OAAe,IAARG,+BAIbT,MAAA,WAEE,MAAO,qEAGTA,MAAA,SAAyBU,EAAcC,GASrC,IANA,IAAIC,GAAQ,EAENV,EAAUC,KAAKC,eAAeM,GAC9BG,EAAUV,KAAKC,eAAeO,GAChCG,EAAS,GAELR,EAAE,EAAGA,EAAEJ,EAAQK,OAAQD,IAC1BJ,EAAQI,IAAMO,EAAQP,IACvBQ,GAAU,IACVF,GAAQ,GAGLV,EAAQa,SAASF,EAAQP,MAC1BQ,GAAU,IACVF,GAAQ,GAKJV,EAAQI,GAAG,GAAKO,EAAQP,IAAQJ,EAAQI,GAAG,GAAKO,EAAQP,KAE1DQ,GAAU,IACVF,GAAQ,GAOhB,OAHY,GAATA,IACDE,EAAS,uBAEJA,gBAITd,MAAA,SAAKgB,GAIH,IAFA,IAAIF,EAAS,GAELR,EAAE,EAAGA,EAAEU,EAAIT,OAAQD,IACzBQ,GAAUE,EAAIV,GAEhB,OAAOQ,2BAITd,MAAA,SAAgBU,EAAeC,GAE7B,IAAIG,EAASX,KAAKc,eAAeN,GAYjC,OAVGD,GAAiBC,IAClBG,EAASX,KAAKe,uBAEH,gBAAVJ,GAA4BJ,GAAeC,GAE/B,wBADbG,EAASX,KAAKgB,yBAAyBT,EAAcC,MAEnDG,EAASX,KAAKiB,KAAKjB,KAAKC,eAAeU,GAAQO,SAI5CP,0BAITd,MAAA,SAAeU,GAKb,IAHA,IAAIY,EAAYC,OAAOb,GACjBc,EAAQ,GAENlB,EAAE,EAAGA,EAAEgB,EAAUf,OAAQD,IAAK,CACpC,IAAImB,EAAYH,EAAUI,OAAOpB,GACjCkB,EAAMG,KAAKF,GAEb,OAAOD,0BAITxB,MAAA,SAAeC,GAEb,MAAa,IAAVA,EACM,eAEFA,iCAITD,MAAA,WAME,OAFgB4B,KAAKC,MAAqB,MAAfD,KAAKE,SAAyB,0FA3HvD/B,0BCAN,MAAAgC,KAAAC,EAAA,sCAEA,IAWIC,EACAC,EAZEC,EAAcC,SAASC,cAAc,aACrC3B,EAAgB0B,SAASC,cAAc,mBACvCC,EAASF,SAASC,cAAc,YAEhCE,EAAOH,SAASC,cAAc,gBAC9BG,EAAQJ,SAASC,cAAc,iBAC/BI,EAAQL,SAASC,cAAc,mBAC/BK,EAAMN,SAASC,cAAc,kBAE7BM,EAAgBP,SAASC,cAAc,mBAM7CE,EAAKK,iBAAiB,UAAU,SAACC,GAE/BA,EAAMC,iBACNb,EAAUvB,EAAcV,MACxBkC,EAAWa,OAAOC,SAASb,EAAYnC,OACvCuC,EAAKU,WAIPT,EAAMI,iBAAiB,UAAU,SAACC,GAEhCA,EAAMC,iBACN,IAAMI,EAAcZ,EAAOtC,MAEvBmD,GADQ,IAAIpD,EAAAA,SACMqD,gBAAgBnB,EAAQiB,GAC9ChB,IAIEQ,EAAIW,UAFS,GAAZnB,EAEe,2CAAuDD,EAAU,OAIjE,MAAQkB,EAAY,eAAiBjB,EAArC,mBAKpBO,EAAMG,iBAAiB,UAAU,SAACC,GAEhCA,EAAMC,iBACNb,EAAUqB,wBACVpB,EAAWa,OAAOC,SAASb,EAAYnC,OACvCuC,EAAKU,WAIPN,EAAcC,iBAAiB,UAAU,SAACC,GAExCA,EAAMC,iBACNS,SAASC,SACTC,MAAM","sources":["src/Vaca_Toro.js","src/presenter.js"],"sourcesContent":["class Vaca_Toro {\n\n      // FUNCION PARA BUSCAR BISONTE (Buscador de numeros primos) \\\\\n      Busca_Primos(codigo) {\n\n        const codVec1 = this.Separar_Codigo(codigo);\n        let resp = \"\";\n        for(var i=0; i<codVec1.length; i++) {\n            if(this.Primo(codVec1[i])){\n                resp += \"%\";\n            }\n        }   \n        return resp;\n      }\n\n      // Verifica si es numero primo \\\\\n      Primo(num) {\n\n        for (var i=2; i<num; i++) {\n          if (num % i === 0) {\n            return false;\n          }\n        }\n        return num !== 1;\n      }\n\n  // Mensaje cuando adivinas \\\\\n  Mensaje_Felicidades() {\n\n    return \"Felicidades Adivinaste El codigo\";\n  }\n  \n  Buscar_Vaca_Toro_Ternera(codigoSecreto,codigoIngresado) {  \n\n    // Para codigo incompatible \\\\\n    let coonf = false;\n\n    const codVec1 = this.Separar_Codigo(codigoSecreto);\n    const codVec2 = this.Separar_Codigo(codigoIngresado);\n    let output = \"\";\n\n    for(var i=0; i<codVec1.length; i++) {\n      if(codVec1[i] == codVec2[i]){\n        output += \"!\";\n        coonf = true;\n      }\n      else {\n        if(codVec1.includes(codVec2[i])) {\n          output += \"*\";\n          coonf = true;\n        }                                    \n      }\n\n          // FUNCION PARA BUSCAR TERNERA \\\\\n          if((codVec1[i]+1 == codVec2[i]) || (codVec1[i]-1 == codVec2[i])) {\n\n            output += \"#\";\n            coonf = true;\n          }    \n      \n    }    \n    if(coonf == false) {\n      output = \"Codigo imcompatible\";\n    }                \n    return output;\n  }\n\n  // Adjuntar codigo incompleto para tratar de volver a comparar \\\\\n  Unir(cod) {\n\n    let output = \"\";\n\n    for(var i=0; i<cod.length; i++) {\n      output += cod[i];\n    }\n    return output;\n  }    \n\n  // !!! FUNCION PRINCIPAL !!! el cual tiene la funcion segun la logica de direccionar a las demas funciones \\\\\n  Comparar_Codigo(codigoSecreto, codigoIngresado) {\n\n    let output = this.Validar_Codigo(codigoIngresado)\n\n    if(codigoSecreto == codigoIngresado) {\n      output = this.Mensaje_Felicidades();\n    }\n    if(output != \"Codigo Vacio\" && codigoSecreto!=codigoIngresado) {\n      output = this.Buscar_Vaca_Toro_Ternera(codigoSecreto,codigoIngresado);            \n      if(output != \"Codigo imcompatible\") {              \n        output = this.Unir(this.Separar_Codigo(output).sort()) \n      }\n    }\n\n    return output;\n  }\n\n  // Dividir la cadena de numeros o letras en posiciones de un Vector, para su futura comparacion por elemento. \\\\\n  Separar_Codigo(codigoSecreto) {\n\n    let numString = String(codigoSecreto);\n    const array = []    \n\n    for(var i=0; i<numString.length; i++) {\n      let valInsert = numString.charAt(i);\n      array.push(valInsert);        \n    }\n    return array;\n  }\n\n  // Acepta si no se ingreso ningun codigo \\\\\n  Validar_Codigo(codigo) {\n\n    if(codigo == \"\") {\n      return \"Codigo Vacio\";    \n    }\n    return codigo;\n  }\n\n  // Generar un codigo numeral aleatorio, INCOMPLETO \\\\\n  Codigo_Secreto_Random() {\n\n    let codigoSecreto;\n\n    codigoSecreto = Math.floor(Math.random()*(100000-1000+1)+1000);\n    \n    return codigoSecreto;\n  }\n}\n\nexport default Vaca_Toro;\n","import Vaca_Toro from \"./Vaca_Toro.js\";\n\nconst numIntentos = document.querySelector(\"#intentos\");\nconst codigoSecreto = document.querySelector(\"#codigo-secreto\");\nconst intent = document.querySelector(\"#intento\");\n\nconst form = document.querySelector(\"#inicio-form\");\nconst form2 = document.querySelector(\"#intento-form\");\nconst form3 = document.querySelector(\"#aleatorio-form\");\nconst div = document.querySelector(\"#resultado-div\");\n\nconst formReiniciar = document.querySelector(\"#reiniciar-form\");\n\nlet secreto;\nlet intentos;\n\n// Ingresar codigo secreto y seleccionar numero de intentos \\\\\nform.addEventListener(\"submit\", (event) => {\n\n  event.preventDefault();\n  secreto = codigoSecreto.value;\n  intentos = Number.parseInt(numIntentos.value);\n  form.reset();\n});\n\n// Numero de intentos y mensaje de adivinacion fallida \\\\\nform2.addEventListener(\"submit\", (event) => {\n\n  event.preventDefault();\n  const firstNumber = intent.value;\n  let juego = new Vaca_Toro();\n  let resultado = juego.Comparar_Codigo(secreto,firstNumber);\n  intentos--\n\n  if(intentos == 0) {\n\n    div.innerHTML = \"<p>\" + \" Perdiste :( \" + \" El codigo secreto era: \" + secreto + \"</p>\";\n  }\n  else {\n\n    div.innerHTML = \"<p>\" + resultado + \" Te quedan: \" + intentos + \" intentos\" + \"</p>\";\n  }\n});\n\n// Boton para generar codigo random, INCOMPLETO \\\\\nform3.addEventListener(\"submit\", (event) => {\n\n  event.preventDefault();\n  secreto = Codigo_Secreto_Random();\n  intentos = Number.parseInt(numIntentos.value);\n  form.reset();\n});\n\n// Reinicia la pagina \\\\\nformReiniciar.addEventListener(\"submit\", (event) => \n{\n  event.preventDefault();\n  location.reload();\n  alert(\"(Pantalla Nueva).\");\n});\n"],"names":["Vaca_Toro","value","codigo","codVec1","this","Separar_Codigo","resp","i","length","Primo","num","codigoSecreto","codigoIngresado","coonf","codVec2","output","includes","cod","Validar_Codigo","Mensaje_Felicidades","Buscar_Vaca_Toro_Ternera","Unir","sort","numString","String","array","valInsert","charAt","push","Math","floor","random","$89b0829c857563b6$var$_Vaca_Toro","parcelRequire","secreto","intentos","numIntentos","document","querySelector","intent","form","form2","form3","div","formReiniciar","addEventListener","event","preventDefault","Number","parseInt","reset","firstNumber","resultado","Comparar_Codigo","innerHTML","Codigo_Secreto_Random","location","reload","alert"],"version":3,"file":"index.dafcf2fa.js.map"}